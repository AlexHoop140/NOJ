<?php

namespace App\Jobs;

use Illuminate\Bus\Queueable;
use Illuminate\Queue\SerializesModels;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use App\Models\Eloquent\Contest;
use Imtigger\LaravelJobStatus\Trackable;
use PDF;
use Str;
use Storage;

class GeneratePDF implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels, Trackable;

    public $tries = 1;
    protected $cid;
    protected $config;

    /**
     * Create a new job instance.
     *
     * @return void
     */

    public function __construct($cid, $config)
    {
        $this->prepareStatus();
        $this->cid = $cid;
        $default = [
            'cover' => false,
            'advice' => false,
        ];
        $this->config = array_merge($default, $config);
    }

    /**
     * Execute the job.
     *
     * @return void
     */
    public function handle()
    {
        $cid = $this->cid;
        $config = $this->config;

        if (!is_dir(storage_path("app/contest/pdf/"))) {
            mkdir(storage_path("app/contest/pdf/"), 0777, true);
        }

        $record = Contest::find($cid);

        // $headerPath = 'headers/'.Str::random(32).".html";

        // Storage::disk("temp")->put('headers/'.Str::random(32).".html", "Generated by NOJ - https://github.com/ZsgsDesign/NOJ");

        $pdfContest = PDF::setOptions([
            // 'footer-html' => storage_path("temp/$headerPath"),
            'header-left' => "Generated by NOJ - https://github.com/ZsgsDesign/NOJ",
            'header-line' => true,
            'footer-left' => $record->name,
            'footer-right' => "Page [page]",
            'footer-font-size' => 10,
            'header-font-size' => 10,
            'margin-bottom' => 24,
            'margin-left' => 12,
            'margin-right' => 12,
            'margin-top' => 24,
            'header-spacing' => 12,
            'footer-spacing' => 12,
            'encoding' => 'utf-8',
            'javascript-delay' => 5000,
            'no-stop-slow-scripts' => true,
            'window-status' => "finished",
            'disable-smart-shrinking' => true,
            'dpi' => 400,
            // 'zoom' => 0.75
        ])->loadView('pdf.contest.main', [
            'conf' => $config,
            'contest' => [
                'cid' => $cid,
                'name' => $record->name,
                'shortName' => $record->name,
                'date' => date("F j, Y", strtotime($record->begin_time)),
            ],
            'problemset' => $record->getProblemSet(false),
        ])->setPaper('a4')->save(storage_path("app/contest/pdf/$cid.pdf"), true);

        // dump(Contest::find($cid)->getProblemSet(false)[0]['title']);

        // $pdf=PDF::setOptions([
        //     'dpi' => 150,
        //     'isPhpEnabled' => true,
        //     'isHtml5ParserEnabled' => true,
        //     'isRemoteEnabled' => true
        // ])->setWarnings(true)->loadView('pdf.contest.main', [
        //     'conf'=>$config,
        //     'contest' => [
        //         'cid'=>$cid,
        //         'name'=>$record->name,
        //         'shortName'=>$record->name,
        //         'date'=>date("F j, Y", strtotime($record->begin_time)),
        //     ],
        //     'problemset'=>$record->getProblemSet(false),
        // ]);

        // $pdf->getDomPDF()->add_info('Subject', "$record->name ProblemSet");
        // $pdf->getDomPDF()->add_info('Producer', config('app.displayName'));
        // $pdf->getDomPDF()->add_info('Creator', config('app.name').' Contest PDF Auto-Generater');
        // $pdf->getDomPDF()->add_info('CreatorTool', config('app.url'));
        // $pdf->getDomPDF()->add_info('BaseURL', route('contest.detail',['cid'=>$cid]));

        // $pdf->save(storage_path("app/contest/pdf/$cid.pdf"));

        $record->pdf = 1;
        $record->save();
    }

    public function failed()
    {
    }
}
